% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vl_submit.R
\name{vl_submit}
\alias{vl_submit}
\title{Submit Commands to a Server with Resource Management}
\usage{
vl_submit(
  cmd,
  cores = 8,
  mem = 16,
  time = "08:00:00",
  job.name = "myJob",
  logs = "db/logs",
  overwrite = FALSE,
  Rpath = "/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript",
  execute = TRUE
)
}
\arguments{
\item{cmd}{A `data.table` containing the commands to execute, with columns:
- `file.type`: Type of output file.
- `path`: Path to the output file.
- `cmd`: Shell command to execute.}

\item{cores}{Number of CPU cores to allocate. Default: `8`.}

\item{mem}{Memory allocation in GB. Default: `16`.}

\item{time}{Maximum runtime for the job (HH:MM:SS). Default: `"08:00:00"`.}

\item{job.name}{Name of the job. Default: `"myJob"`.}

\item{logs}{Directory for log files. Default: `"db/logs"`.}

\item{overwrite}{Logical. If `TRUE`, overwrites existing output files. Default: `FALSE`.}

\item{Rpath}{Path to the Rscript binary. Default: `"/software/f2022/software/r/4.3.0-foss-2022b/bin/Rscript"`.}

\item{execute}{Logical. If `TRUE`, submits the command to the server. If `FALSE`, returns the constructed command. Default: `TRUE`.}
}
\value{
If `execute = FALSE`, returns the constructed shell command as a string. Otherwise, submits the job and returns nothing.
}
\description{
Submits shell commands to a server using resource management (e.g., LSF). Handles job submission,
resource allocation, and optional directory creation for output files.
}
\examples{
# Submit a command to the server
cmd <- data.table(
  file.type = "bam",
  path = "output.bam",
  cmd = "echo 'Hello world'"
)
vl_submit(cmd, job.name = "Hello")

# Return the constructed command without submitting
vl_submit(cmd, execute = FALSE)

}
