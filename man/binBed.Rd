% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bedTools.R
\name{binBed}
\alias{binBed}
\title{Bin Genomic Regions into Fixed-Size or Sliding Windows}
\usage{
binBed(
  bed,
  nbins,
  center.nbins = FALSE,
  genome = NULL,
  bins.width = NULL,
  steps.width = bins.width,
  ignore.strand = FALSE
)
}
\arguments{
\item{bed}{Input genomic ranges in any format compatible with ?importBed.}

\item{nbins}{Integer specifying the number of equal-sized bins in which each region is divided.}

\item{center.nbins}{If set to TRUE and nbins is specified, bins are centered around the regions' midpoints.
If set to FALSE (default), the first bin will start from the leftmost coordinate.}

\item{genome}{When center.bins is set to TRUE, a BS genome name (e.g. 'dm6', 'mm10') that will be used to clip
resized regions that might extend beyond chromosome size (see details).}

\item{bins.width}{Integer specifying the width of the bins in which each region is divided.
Used only when nbins is not specified.}

\item{steps.width}{Integer specifying the distance between starts of consecutive bins. Used in
combination with bins.width. Default= bins.width, resulting in non-overlapping bins.
Smaller values create overlapping bins.}

\item{ignore.strand}{Although bins will always start from the leftmost coordinates, this argument
controls whether bins' indices respect feature's orientation. Default= FALSE (i.e. downstream bins
receive higher indices).}
}
\value{
A gr data.table with columns:
\itemize{
  \item line.idx: line index of the region in bed.
  \item bin.idx: bin index (unique for each line.idx).
  \item seqnames: chromosome or sequence name.
  \item start: bin start position.
  \item end: bin end position.
  \item Additional columns within bed input are preserved.
}
}
\description{
A wrapper around ?GenomicRanges::tile and ?GenomicRanges::slidingWindows, that creates fixed-size
or sliding window bins from genomic ranges.
}
\details{
**Centered Binning**:
Centering bins (center.nbins = TRUE) is useful for analyzing features relative to central points.
In this case, each region will first be extended symmetrically by region_width/(nbins-1)/2, and a
genome can be specified to avoid regions outside of chromosome sizes.
}
\examples{
# Equal division binning
regions <- importBed(c("chr2L:1-10:+", "chr2L:100-200:-"))

# Split into 5 equal bins
binBed(regions, nbins = 5)

# Non-overlapping 50bp bins
binBed(regions, bins.width = 50, steps.width = 50)

# Overlapping 50bp bins
binBed(regions, bins.width = 50, steps.width = 25)

# Compare start-anchored vs. centered binning
nc1 <- binBed(regions, nbins= 5)
c1 <- binBed(regions, nbins= 5, center.nbins = TRUE)
nc2 <- binBed(regions, bins.width = 25)

plot(x= c(50, 250), y= c(4, 10), type= "n", xlab= "coordinates", ylab= NA, yaxt= "n")
abline(v= c(100, 200))
nc1[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 9, pos= 3, "nbins=5"); rect(start, 8, end, 9)}]
c1[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 7, pos= 3, "centered"); rect(start, 6, end, 7)}]
nc2[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 5, pos= 3, "bins.width=25"); rect(start, 4, end, 5)}]

}
