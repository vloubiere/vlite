% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binBed.R
\name{binBed}
\alias{binBed}
\title{Bin Genomic Regions into Fixed-Size or Sliding Windows}
\usage{
binBed(
  bed,
  nbins,
  bins.width = NULL,
  steps.width = bins.width,
  bins.width.min = FALSE,
  centered = FALSE,
  ignore.strand = FALSE
)
}
\arguments{
\item{bed}{Input genomic ranges in any format compatible with `importBed()`:
\itemize{
  \item Character vector of ranges ("chr:start-end[:strand]")
  \item GRanges object
  \item data.frame/data.table with required columns
  \item Path to a BED file
}}

\item{nbins}{Integer. Number of equal-sized bins per region. If specified,
`bins.width` is ignored.}

\item{bins.width}{Integer. Size of each bin in base pairs. Used only when
`nbins` is not specified.}

\item{steps.width}{Integer. Distance between starts of consecutive bins.
Default equals `bins.width` (non-overlapping bins). Smaller values create
overlapping bins.}

\item{bins.width.min}{Logical. If `TRUE`, only returns complete bins matching
`bins.width` exactly. Default is `FALSE`.}

\item{centered}{Logical. If `TRUE`, centers bins around region midpoints.
Default is `FALSE`.}

\item{ignore.strand}{Logical. If `TRUE`, bins left-to-right regardless of
strand. Default is `FALSE`.}
}
\value{
A data.table with columns:
\itemize{
  \item line.idx: Index linking bins to source regions
  \item bin.idx: Sequential bin number within each region
  \item seqnames: Chromosome/sequence name
  \item start: Bin start position
  \item end: Bin end position
  \item Additional columns from input preserved
}
}
\description{
Creates fixed-size or sliding window bins from genomic regions. Supports both
equal-division binning and sliding window approaches, with options for
strand-awareness and centered binning.
}
\details{
**Binning Methods**:

1. Equal Division (`nbins`):
   - Splits each region into `nbins` equal parts
   - Useful for comparing regions of different sizes
   - All bins within a region have equal width

2. Sliding Window (`bins.width`):
   - Creates fixed-width bins
   - Controls overlap via `steps.width`:
     * `steps.width = bins.width`: Non-overlapping bins
     * `steps.width < bins.width`: Overlapping bins
     * `steps.width > bins.width`: Gaps between bins
   - Option to filter incomplete bins (`bins.width.min`)

**Strand Handling**:

- `ignore.strand = FALSE`:
  * Positive/unstranded: Left to right binning
  * Negative strand: Right to left binning
- `ignore.strand = TRUE`: Always bins left to right

**Centered Binning**:

When `centered = TRUE`:
- Extends regions symmetrically around midpoint
- Useful for analyzing features relative to central points
- Extension size depends on binning method:
  * Equal division: (region_width/nbins)/2
  * Sliding window: bins.width/2
}
\examples{
# Equal division binning
regions <- c(
  "chr2L:1-10:+",    # 10bp region
  "chr2L:100-200:-"  # 100bp region
)

# Split into 2 equal bins
binBed(regions, nbins = 2)

# Split into 5 equal bins
binBed(regions, nbins = 5)

# Sliding window with different overlaps
region <- "chr2L:1-20:+"

# Non-overlapping 5bp bins
binBed(region, bins.width = 5, steps.width = 5)

# Overlapping bins (2bp step)
binBed(region, bins.width = 5, steps.width = 2)

# With gaps (7bp step)
binBed(region, bins.width = 5, steps.width = 7)

# Centered binning
tss <- "chr2L:1000:+"  # TSS position
# Create 100bp bins centered on TSS
binBed(tss, bins.width = 100, centered = TRUE)

# Strand-specific binning
binBed("chr2L:1-10:+", nbins = 2)  # Left to right
binBed("chr2L:1-10:-", nbins = 2)  # Right to left

}
