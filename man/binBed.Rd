% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/binBed.R
\name{binBed}
\alias{binBed}
\title{Bin Genomic Regions into Fixed-Size or Sliding Windows}
\usage{
binBed(
  bed,
  nbins,
  center.nbins = FALSE,
  bins.width = NULL,
  steps.width = bins.width,
  bins.width.min = FALSE,
  genome = NULL,
  ignore.strand = FALSE
)
}
\arguments{
\item{bed}{Input genomic ranges in any format compatible with ?importBed().}

\item{nbins}{Integer specifying the number of equal-sized bins in which each region is divided.}

\item{center.nbins}{If set to TRUE, bins are centered around the regions' midpoints. If set to
FALSE (default), the first bin will start from the most upstream coordinate.
Only meaningful when nbins is specified.}

\item{bins.width}{Integer specifying the width of the bins in which each region is divided.
Used only when nbins is not specified. See bins.width.min for handling shorter bins
near bed boundaries.}

\item{steps.width}{Integer specifying the distance between starts of consecutive bins. Used in
combination with bins.width. Default= bins.width, resulting in non-overlapping bins.
Smaller values create overlapping bins.
If specified, bins.width is ignored.}

\item{bins.width.min}{If set to TRUE, only bins matching the size specified in bins.width
are returned. This is useful to exclude shorter bins nearby regions' boundaries.
Default= FALSE.}

\item{ignore.strand}{If set to TRUE, bins are oriented in 5' to 3' positions, regardless of
their strand. If set to FALSE (default), bins orientation respect the strand.}
}
\value{
A gr data.table with columns:
\itemize{
  \item line.idx: line index of the region in bed.
  \item bin.idx: bin index (unique for each line.idx).
  \item seqnames: chromosome or sequence name.
  \item start: bin start position.
  \item end: bin end position.
  \item Additional columns within bed input are preserved.
}
}
\description{
Creates fixed-size or sliding window bins from genomic ranges. Supports both
equal-division binning and sliding window approaches.
}
\details{
**Centered Binning**:
Centering bins (center.nbins = TRUE) is useful for analyzing features relative to central points.
In this case, each region will first be extended symmetrically by region_width/(nbins-1)/2.
Only available when using nbins.
}
\examples{
# Equal division binning
regions <- importBed(c("chr2L:1-10:+", "chr2L:100-200:-"))

# Split into 5 equal bins
binBed(regions, nbins = 5)

# Non-overlapping 50bp bins
binBed(regions, bins.width = 50, steps.width = 50)

# Overlapping 50bp bins
binBed(regions, bins.width = 50, steps.width = 25)

# Compare start-anchored vs. centered binning
nc1 <- binBed(regions, nbins= 5)
c1 <- binBed(regions, nbins= 5, center.nbins = TRUE)
nc2 <- binBed(regions, bins.width = 25)

plot(x= c(50, 250), y= c(4, 10), type= "n", xlab= "coordinates", ylab= NA, yaxt= "n")
abline(v= c(100, 200))
nc1[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 9, pos= 3, "nbins=5"); rect(start, 8, end, 9)}]
c1[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 7, pos= 3, "centered"); rect(start, 6, end, 7)}]
nc2[line.idx==2][, {text(x= mean(c(start[1], end[.N])), y= 5, pos= 3, "bins.width=25"); rect(start, 4, end, 5)}]

}
