% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vl_motifEnrich.R
\name{vl_motifEnrich}
\alias{vl_motifEnrich}
\title{Motif enrichment analysis}
\usage{
vl_motifEnrich(
  counts,
  control.counts,
  names = vl_Dmel_motifs_DB_full[colnames(counts), motif_cluster, on = "motif_ID"],
  plot = F,
  padj.cutoff = 0.05,
  top.enrich = Inf,
  min.counts = 3L,
  order = "padj",
  breaks = NULL,
  col = c("blue", "red"),
  xlab = "Odd Ratio (log2)",
  add.motifs = F,
  cex.width = 1,
  cex.height = 1
)
}
\arguments{
\item{counts}{data.table containing counts for the regions of interest.}

\item{control.counts}{data.table containing counts for control regions. Should have the same number of columns as 'counts' table.}

\item{names}{Convenient names to be used for aggregating and plotting. By default, returns motif_cluster matching motif_ID in vl_Dmel_motifs_DB_full.}

\item{plot}{Plot result?}

\item{padj.cutoff}{cutoff for plotting. Default= FALSE.}

\item{top.enrich}{Show only n top enriched motifs. Default= Inf (all).}

\item{min.counts}{The minimum number of counts required to call a hit. Default= 3L.}

\item{order}{Value to be used for ordering before selecting top enriched. Possible values are "padj", "log2OR". Defaut= "padj".}

\item{breaks}{Color breaks to be used. Defaults to range of filtered padj.}

\item{col}{Colors vector for bars.}

\item{xlab}{x label.}

\item{add.motifs}{Should motif pwms be plotted?}

\item{cex.width}{Expansion factor for motif widths.}

\item{cex.height}{Expansion factor for motif heights.}
}
\value{
DT of enrichment values which can be plot using ?plot.vl_GO_enr
}
\description{
Compute motif enrichment between a set of regions and control regions
}
\examples{
# Resize example peaks
SUHW <- resizeBed(vl_SUHW_top_peaks, genome = "dm3")
STARR <- resizeBed(vl_STARR_DSCP_top_peaks, genome = "dm3")

# Generate same number of random regions
random <- controlRegionsBSgenome(bed= STARR, genome= "dm3")

# Count JAPSPAR motifs (see below to use custom list of PWMs)
suhw <- vl_motifCounts(SUHW, genome= "dm3", pwm_log_odds= vl_Dmel_motifs_DB_full[collection=="jaspar", pwms_log_odds])
starr <- vl_motifCounts(top_STARR, genome= "dm3", pwm_log_odds= vl_Dmel_motifs_DB_full[collection=="jaspar", pwms_log_odds])
ctl <- vl_motifCounts(random, genome= "dm3", pwm_log_odds= vl_Dmel_motifs_DB_full[collection=="jaspar", pwms_log_odds])

# Starting from sequence instead of bed file
seq <- getBSsequence(SUHW, genome= "dm3")
seq_suhw <- vl_motifCounts(seq, genome= "dm3", pwm_log_odds= vl_Dmel_motifs_DB_full[collection=="jaspar", pwms_log_odds])
identical(suhw, seq_suhw)

# Motifs can also be counted using a custom PWMatrixList, for example for promoter motifs:
prom_db <- readRDS("/groups/stark/almeida/data/motifs/CP_motifs/CP_motifs_PWM.rds")
prom <- prom_db$Pwms_log_odds
for(i in seq(prom))
  prom[[i]]@profileMatrix <- pwmPercToLog(prom_db$Pwms_perc[[i]]@profileMatrix)

prom_motifs <- vl_motifCounts(STARR,
                               pwm_log_odds= prom,
                               genome= "dm3")

# Compute enrichment at SUHW peaks, using random controls as background
pl <- vl_motifEnrich(suhw,
                      ctl,
                      plot= F)
pl[order(padj)][1:3] # Top motif is su(Hw)
# Plot
plot(pl,
     top.enrich= 3)


# Compute enrichment at STARR peaks and plot at the same time
enr <- vl_motifEnrich(starr,
                       ctl,
                       plot= T,
                       order= "log2OR",
                       padj.cutoff= 1e-5)
# Positive enrichments identify typical S2 enhancer motifs
plot(enr[log2OR>.5])

}
